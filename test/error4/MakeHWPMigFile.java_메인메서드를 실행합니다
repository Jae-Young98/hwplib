import java.io.File;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.util.List;

import org.apache.commons.io.FileUtils;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.springframework.util.FileCopyUtils;

import kr.dogfoot.hwpgenerator.smart.AppendOption;
import kr.dogfoot.hwpgenerator.smart.FieldFindOption;
import kr.dogfoot.hwpgenerator.smart.FieldItem;
import kr.dogfoot.hwpgenerator.smart.HWPGenFieldGetter;
import kr.dogfoot.hwpgenerator.smart.HWPGenInserter;
import kr.dogfoot.hwpgenerator.smart.HWPGenTableGetter;
import kr.dogfoot.hwplib.object.HWPFile;
import kr.dogfoot.hwplib.object.bodytext.Section;
import kr.dogfoot.hwplib.object.bodytext.control.Control;
import kr.dogfoot.hwplib.object.bodytext.control.ControlSectionDefine;
import kr.dogfoot.hwplib.object.bodytext.control.ControlTable;
import kr.dogfoot.hwplib.object.bodytext.control.ControlType;
import kr.dogfoot.hwplib.object.bodytext.paragraph.Paragraph;
import kr.dogfoot.hwplib.reader.HWPReader;
import kr.dogfoot.hwplib.tool.objectfinder.ControlFilter;
import kr.dogfoot.hwplib.tool.objectfinder.ControlFinder;
import kr.dogfoot.hwplib.writer.HWPWriter;

/**
 * COMMENT Description
 */

/**
 * <PRE>
 * System Name : 국세법령정보시스템
 * Project Name : ntlis-migration
 * File Name : MakeHWPMigFile.java
 * Modification History
 *  수정일                  수정자                수정내용
 * -------         --------        --------
 * 2023. 9. 26.  Leejaemu          최초작성
 * </PRE>
 * @author Leejaemu
 */
/**
 * <PRE>
 * System Name : 국세법령정보시스템
 * Project Name : ntlis-migration
 * File Name : MakeHWPMigFile.java
 * Modification History
 *  수정일                  수정자                수정내용
 * -------         --------        --------
 * 2023. 10. 13.  ChoiHeekyun          최초작성
 * </PRE>
 * @author ChoiHeekyun
 */
public class MakeHWPMigFile {
	
	private static final String ROOT_PATH = "D:\\mig\\new3";
	//private static final String SAVE_PATH = "D:\\mig\\remake_doubletable";
	private static final String SAVE_PATH = "D:\\mig\\remake_sec";
	private static final String ERROR_PATH = "D:\\mig\\error4";
	
	private static final String WEB_DRV_DIR = "C:\\ntlis_dev\\workspace\\ntlis-migration\\chromedriver.exe";
	private static final String WEB_DRV_ID = "webdriver.chrome.driver";
	
	public static void mkdir(String path) {
		String pt = path;
		File p = new File(pt);
		if(!p.exists()) {
			p.mkdirs();
		}
		
	}
	
	public static void remake(File hwp, String targetPath) throws Exception {
		File toFile = new File(targetPath);
		boolean isSave = true;
		
		if(toFile.exists()) {
			return;
		}
		
		String hwpFilePath = hwp.getAbsolutePath();
		//System.out.println(hwpFilePath);
		
		HWPFile hwpFile = HWPReader.fromFile(hwp);
		
		boolean isFind = false;
		
		
		String[][] tableText = HWPGenTableGetter.getAllCellFieldName(hwpFile, "s1");
		if(null == tableText) {
			tableText = HWPGenTableGetter.getAllCellFieldName(hwpFile, "로고");
		}
		if(null == tableText) {
			tableText = HWPGenTableGetter.getAllCellFieldName(hwpFile, "상단빈공간");
		}
		
		if(hwpFile.getBodyText().getSectionList().size() > 1) {
			if(hwpFile.getBodyText().getSectionList().get(0).getParagraphCount() > 10) {
				hwpFile.getBodyText().getSectionList().get(0).deleteParagraph(0);
				hwpFile.getBodyText().getSectionList().get(0).getParagraph(0).getHeader().getDivideSort().setDividePage(false);
				
				hwpFile.getBodyText().getSectionList().remove(1);
			}else {
				hwpFile.getBodyText().getSectionList().remove(0);
			}
		}else {
			Paragraph p = hwpFile.getBodyText().getSectionList().get(0).getParagraph(0);
			
			for(Control c : p.getControlList()) {
				if(c.getType() == ControlType.Table) {
					isFind = true;
					break;
				}
			}
			
			if(isFind == false) {
				hwpFile.getBodyText().getSectionList().get(0).deleteParagraph(0);
				hwpFile.getBodyText().getSectionList().get(0).deleteParagraph(0);
			}else {
				hwpFile.getBodyText().getSectionList().get(0).deleteParagraph(0);
			}
			
			hwpFile.getBodyText().getSectionList().get(0).getParagraph(0).getHeader().getDivideSort().setDividePage(false);
			
			/*
			List<Control> c = ControlFinder.find(hwpFile, new ControlFilter() {
				private boolean hasSectionDefine = false;
				private boolean hasColumnDefine = false;
				private boolean hasTableDefine = false;
				
				
				@Override
				public boolean isMatched(Control arg0, Paragraph arg1, Section arg2) {
					if(!hasSectionDefine && arg0.getType() == ControlType.SectionDefine) {
						hasSectionDefine = true;
						return true;
					}
					
					if(!hasColumnDefine && arg0.getType() == ControlType.ColumnDefine) {
						hasColumnDefine = true;
						return true;
					}
					
					if(!hasTableDefine && arg0.getType() == ControlType.Table) {
						hasSectionDefine = true;
						hasColumnDefine = true;
						hasTableDefine = true;
						return true;
					}
					
					return false;
				}
			});
			
			if(c.size() > 0) {
				boolean hasSectionDefine = false;
				 boolean hasColumnDefine = false;
				 boolean hasTableDefine = false;
				 
				for(Control con : c) {
					 
					
					if(con.getType() == ControlType.SectionDefine) {
						//ControlSectionDefine csd = (ControlSectionDefine)con;
						hasSectionDefine = true;
					}
					
					if(con.getType() == ControlType.ColumnDefine) {
						hasColumnDefine = true;
					}
					
					if(con.getType() == ControlType.Table) {
						hasTableDefine = true;
					}
				}
				
				if(hasSectionDefine && hasColumnDefine && hasTableDefine) {
					for(Control con : c) {
						if(con.getType() == ControlType.SectionDefine) {
							//ControlSectionDefine csd = (ControlSectionDefine)con;
						}
						
						if(con.getType() == ControlType.ColumnDefine) {
						}
						
						if(con.getType() == ControlType.Table) {
							ControlTable ct = (ControlTable)con;
							ct.getRowList().removeAll(ct.getRowList());
							
							isSave = true;
						}
					}
				}
			}*/
		}
		
		if(!isFind) {
			System.out.println(targetPath);
			
			HWPFile saveHwpFile = HWPReader.fromFile("D:\\app_data\\dcmHeader.hwp");
			
			HWPGenInserter.appendToEndOfBody(saveHwpFile, hwpFile, AppendOption.FromLastSection);
			
			mkdir(toFile.getParent());
			HWPWriter.toFile(saveHwpFile, targetPath);
		}
		
		/*
		 * for(Control c : pList[0].getControlList()) {
		 * 
		 * 
		 * if(ControlType.Table == c.getType()) { ControlTable table =
		 * (ControlTable)c;
		 * 
		 * 
		 * } }
		 */
	}
	
	public static void copyErrorFile(File hwp) throws Exception {
		try {
			HWPFile hwpFile = HWPReader.fromFile(hwp);
		}catch(Exception e) {
			String targetPath = hwp.getAbsolutePath().replace(ROOT_PATH, ERROR_PATH);
			File targetFile = new File(targetPath);
			mkdir(targetFile.getParent());
			FileUtils.copyFile(hwp, targetFile);
		}
	}
	
	/**
	 * COMMENT Description
	 *
	 * @param args 
	 * @throws Exception 
	 */

	public static void main2(String[] args) throws Exception {
		String testFile = "C:\\Users\\user\\Documents\\mig\\new\\000000000000107698_국세청적부2007-0124_.hwp";
		HWPFile hwpFile = HWPReader.fromFile(testFile);
		
		FieldItem[] items = HWPGenFieldGetter.getAll(hwpFile);
		for(FieldItem item : items) {
			System.out.println(item.name());
		}
	}
	
	/**
	 * 리메이크 단일파일 테스트
	 *
	 * @param args
	 * @throws Exception 
	 */
	public static void mainOne(String[] args) throws Exception {
		File rootPath = new File("D:\\mig\\new2\\08\\000000000000624548_조심-2023-서-0050.hwp");
		//File rootPath = new File("D:\\mig\\new2\\01\\010000000000073213_법규부가2008-0009.hwp");
		//File rootPath = new File("D:\\mig\\new2\\09\\000000000000357161_대전고등법원2013누947.hwp");
		//D:\mig\new2\09
		//
		
		String savedFilePath ="D:\\mig\\test.hwp";
		
		remake(rootPath, savedFilePath);
	}
	
	
	/**
	 * 전체 리메이크 돌리기
	 *
	 * @param args
	 * @throws Exception 
	 */
	public static void main(String[] args) throws Exception {
		File rootPath = new File(ROOT_PATH);
		File[] dir = rootPath.listFiles();
		
		File logFile = new File("D:\\mig\\error4\\log.txt");
		FileWriter fileWriter = new FileWriter(logFile, true);
		
		fileWriter.append("=======================================================================================");
		
		int cnt = 1;
		
		for(File d : dir) {
			if(d.isFile()) continue;
			
			File[] hwps = d.listFiles();
			
			for(File hwp : hwps) {
				String savedFilePath = hwp.getAbsolutePath().replace(ROOT_PATH, SAVE_PATH).replaceAll("-", "");
				File savedFile = new File(savedFilePath);
				//if(savedFile.exists()) {
					//System.out.println("skip!! " + savedFilePath);
				//	continue; 
				//}
				
				copyErrorFile(hwp);
				
				try {
					remake(hwp, savedFilePath);
				}catch(Exception e) {
					System.out.println(cnt + ". Fail to remake : " + hwp.getAbsolutePath() + " - " + hwp.getName());
					fileWriter.append(cnt + ". Fail to remake : " + hwp.getAbsolutePath() + " - " + hwp.getName());
					e.printStackTrace(new PrintWriter(fileWriter));
					
					String errorFilePath = hwp.getAbsolutePath().replace(ROOT_PATH, ERROR_PATH);
					File errorFile = new File(errorFilePath);
					mkdir(errorFile.getParent());
					FileCopyUtils.copy(hwp, errorFile);
				}
				
				cnt++;
			}
		}
		
		System.out.println("end!!!!!!!!!!!!!!!!!!!!" + cnt);
	}
	
	/**
	 * 내용없는 것 추출
	 *
	 * @param args
	 * @throws Exception 
	 */
	public static void main123(String[] args) throws Exception {
		String rootPathStr = "D:\\mig\\error";
		File rootPath = new File(rootPathStr);
		File errorPath = new File("D:\\mig\\contentless_error");
		String savePath = "D:\\mig\\contentless_success";
		
		File[] dir = rootPath.listFiles();
		
		for(File d : dir) {
			if(d.isFile()) continue;
			
			File[] hwps = d.listFiles();
			
			for(File hwp : hwps) {
				String savedFilePath = hwp.getAbsolutePath().replace(rootPathStr, savePath);
				File savedFile = new File(savedFilePath);
				if(savedFile.exists()) {
					//System.out.println("skip!! " + savedFilePath);
					continue; 
				}
				HWPFile saveHwpFile = HWPReader.fromFile("D:\\app_data\\dcmHeader.hwp");
				HWPFile addHwpFle = HWPReader.fromFile(rootPath);
				
				FieldFindOption option = new FieldFindOption();
				option.nameToFind("회신");
				option.onlyFirst(true);
				option.findField(true);
				option.findGso(false);
				option.findCell(false);
				
				FieldItem[] fItems = HWPGenFieldGetter.getAll(addHwpFle);
				
				if(null != fItems && fItems.length > 0) {
					for(FieldItem item : fItems) {
						if("회신".equals(item.name()) || "사례내용".equals(item.name())) {
							
							break;
						}
					}
				}
			}
		}
	}
	
	public static void main3(String[] args) throws Exception {
		WebDriver driver;
		System.setProperty(WEB_DRV_ID, WEB_DRV_DIR);
		
		ChromeOptions options = new ChromeOptions();
		//options.setCapability("ignoreProtectedModeSettings", true);
		
		driver = new ChromeDriver(options);
		
		
		//String url = "http://localhost:8080/pr/USTPRB002M.do?ntstDcmId=" + d.getNtstDcmId();
		String url = "http://10.188.217.88/boards/12/topics/1080";
		driver.get(url);
		
		String isLoaded = driver.findElement(By.id("isLoaded")).getText();
		
		while("1" == isLoaded) {
			System.out.println(isLoaded);
		}
		
		System.out.println(isLoaded);
	}
}

